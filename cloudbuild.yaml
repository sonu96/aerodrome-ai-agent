# Google Cloud Build configuration for Aerodrome AI Agent
# Supports both App Engine and Cloud Run deployments

options:
  # Use high CPU pool for faster builds
  machineType: 'E2_HIGHCPU_8'
  
  # Enable logging
  logging: CLOUD_LOGGING_ONLY
  
  # Set build timeout
  timeout: '1200s'

# Environment variables for the build
substitutions:
  _SERVICE_NAME: 'aerodrome-ai-agent'
  _REGION: 'us-central1'
  _MEMORY: '2Gi'
  _CPU: '1'
  _MIN_INSTANCES: '1'
  _MAX_INSTANCES: '10'
  _CONCURRENCY: '10'

steps:
  # Step 1: Install dependencies and run tests
  - name: 'python:3.11-slim'
    id: 'test'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Installing dependencies..."
        pip install --upgrade pip
        pip install -r requirements.txt
        
        echo "Running linting..."
        python -m flake8 src/ --max-line-length=100 --ignore=E203,W503 || true
        
        echo "Running type checks..."
        python -m mypy src/ --ignore-missing-imports || true
        
        echo "Running tests..."
        python -m pytest tests/ -v --tb=short || true
        
        echo "Build validation complete"

  # Step 2: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build'
    args:
      - 'build'
      - '--build-arg'
      - 'BUILD_DATE=${BUILD_ID}'
      - '--build-arg'
      - 'GIT_COMMIT=${COMMIT_SHA}'
      - '--build-arg'
      - 'VERSION=${TAG_NAME}'
      - '-t'
      - 'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:${COMMIT_SHA}'
      - '-t'
      - 'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:latest'
      - '.'
    waitFor: ['test']

  # Step 3: Push Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push'
    args:
      - 'push'
      - 'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:${COMMIT_SHA}'
    waitFor: ['build']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-latest'
    args:
      - 'push'
      - 'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:latest'
    waitFor: ['build']

  # Step 4: Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-cloud-run'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image'
      - 'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:${COMMIT_SHA}'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--memory'
      - '${_MEMORY}'
      - '--cpu'
      - '${_CPU}'
      - '--min-instances'
      - '${_MIN_INSTANCES}'
      - '--max-instances'
      - '${_MAX_INSTANCES}'
      - '--concurrency'
      - '${_CONCURRENCY}'
      - '--port'
      - '8080'
      - '--allow-unauthenticated'
      - '--set-env-vars'
      - |
        ENV=production,
        LOG_LEVEL=INFO,
        CONFIDENCE_THRESHOLD=0.3,
        MAX_CONCURRENT_QUERIES=10,
        HEALTH_CHECK_INTERVAL=30,
        RATE_LIMIT_REQUESTS=100/minute,
        RATE_LIMIT_QUERY=10/minute,
        GEMINI_MODEL=gemini-2.0-flash-001
      - '--set-secrets'
      - |
        API_KEY=aerodrome-api-key:latest,
        MEM0_API_KEY=mem0-api-key:latest,
        NEO4J_URI=neo4j-uri:latest,
        NEO4J_USERNAME=neo4j-username:latest,
        NEO4J_PASSWORD=neo4j-password:latest,
        QUICKNODE_URL=quicknode-url:latest,
        GEMINI_API_KEY=gemini-api-key:latest
      - '--add-cloudsql-instances'
      - '${PROJECT_ID}:${_REGION}:aerodrome-db'
      - '--labels'
      - 'app=aerodrome-ai-agent,env=production,version=${TAG_NAME:-latest}'
    waitFor: ['push']

  # Step 5: Update traffic to new revision
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'update-traffic'
    args:
      - 'run'
      - 'services'
      - 'update-traffic'
      - '${_SERVICE_NAME}'
      - '--to-latest'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
    waitFor: ['deploy-cloud-run']

  # Step 6: Verify deployment health
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'verify-deployment'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Getting service URL..."
        SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME} \
          --region=${_REGION} \
          --platform=managed \
          --format='value(status.url)')
        
        echo "Service URL: $SERVICE_URL"
        
        echo "Waiting for service to be ready..."
        sleep 30
        
        echo "Checking health endpoint..."
        curl -f "$SERVICE_URL/health" || exit 1
        
        echo "Checking readiness endpoint..."
        curl -f "$SERVICE_URL/health/ready" || exit 1
        
        echo "Deployment verification successful!"
        echo "Service is available at: $SERVICE_URL"
    waitFor: ['update-traffic']

# Images to keep in Container Registry
images:
  - 'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:${COMMIT_SHA}'
  - 'gcr.io/${PROJECT_ID}/${_SERVICE_NAME}:latest'

# Artifacts to store
artifacts:
  objects:
    location: 'gs://${PROJECT_ID}-build-artifacts'
    paths: ['cloudbuild.yaml', 'Dockerfile', 'app.yaml']

# Trigger configuration
# To create trigger via CLI:
# gcloud builds triggers create github \
#   --repo-name=aerodrome-ai-agent \
#   --repo-owner=your-github-username \
#   --branch-pattern="^main$" \
#   --build-config=cloudbuild.yaml \
#   --include-logs-with-status